name: Docker build, sign, publish to gcr, SBOM generate and Grype scan

# Language: golang
# Version: 1.0.3
# Runner: ubuntu-latest
# Visibility: private

on:
  push:
    branches:
      - "*"
    # branches-ignore:
    #  - 'main'
    tags:
      - v*
#  pull_request:

env:
  DIVE_VERSION: v0.10
  DOCKER_REGISTRY: eu.gcr.io
  PROJECT: guild-xyz

jobs:
  build:
    name: Build, push, sign
    runs-on: self-hosted
    permissions: # <- this section is needed for workload identity
      contents: 'read'
      id-token: 'write'
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Install Cosign
        uses: sigstore/cosign-installer@v2.3.0
        with:
          cosign-release: "v1.8.0"

      - name: Install Syft
        run: curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Get current repository name
        run: echo "REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")" >> $GITHUB_ENV
        shell: bash

      - name: Determine tag name and build arguments
        run: |
          REGISTRY=${{env.DOCKER_REGISTRY}}/${{env.PROJECT}}/$REPOSITORY_NAME
          REGISTRY=$(echo $REGISTRY | tr '[A-Z]' '[a-z]')  
          echo "REGISTRY=$REGISTRY" >> $GITHUB_ENV
          echo "BRANCH=$(echo ${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}})" >> $GITHUB_ENV
          echo "TIMESTAMP=$(echo $(date --iso-8601="seconds"))" >> $GITHUB_ENV
        shell: bash

      - name: Docker tag meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}
          tags: |
            type=ref,event=branch
            type=sha
      - name: Build container image
        uses: docker/build-push-action@v3.1.1
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          platforms: linux/amd64
          file: Dockerfile
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          outputs: type=docker,dest=/tmp/image.tar
          build-args: |
            COMMIT=${{ github.sha }}
            DEVELOPER=${{ github.actor }}
            BRANCH=${{ env.BRANCH }}
            TIMESTAMP=${{ env.TIMESTAMP }}
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          access_token_lifetime: '900s'
          token_format: 'access_token'
          audience: ${{secrets.G_AUDIENCE}}
          workload_identity_provider: ${{secrets.G_WORKLOAD_IDENTITY_PROVIDER}}
          service_account: ${{secrets.G_SERVICE_ACCOUNT}}
      
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: Login to External Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{env.DOCKER_REGISTRY}}
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'

      - name: Build and push
        uses: docker/build-push-action@v3.1.1
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            COMMIT=${{ github.sha }}
            DEVELOPER=${{ github.actor }}
            BRANCH=${{ env.BRANCH }}
            TIMESTAMP=${{ env.TIMESTAMP }}
      - name: Sign container image
        run: |
          cosign sign --key env://COSIGN_PRIVATE_KEY -a REPO=$REPOSITORY_NAME -a TAG=$VERSION -a SIGNER=GitHub -a DEVELOPER=${{ github.actor }} -a TIMESTAMP=$(date --iso-8601="seconds") ${TAGS}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          COSIGN_PRIVATE_KEY: ${{secrets.COSIGN_PRIVATE_KEY}}
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}

      # Syft can't attest multiple container image at same time
      # and can't read the cosign private key from env
      - name: Setup Cosign Private Key
        run: echo "$KEY" > cosign.key
        shell: bash
        env:
          KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: Generate SBOM, sign and push
        run: |
          syft attest --output syft-json --key cosign.key ${TAGS} > sbom_attestation.json
          cosign attach attestation --attestation sbom_attestation.json ${TAGS}
        env:
          TAGS: ${{ env.REGISTRY}}:${{ env.BRANCH }}
          COSIGN_PRIVATE_KEY: ${{secrets.COSIGN_PRIVATE_KEY}}
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}

      - name: Wipe cosign.key
        run: |
          openssl rand -hex 1024 > cosign.key
          rm cosign.key
          
      - name: Archive sbom results
        uses: actions/upload-artifact@v3
        with:
          name: SBOM-ATTESTATION
          path: sbom_attestation.json

  scanners:
    name: Scanners
    runs-on: self-hosted
    needs: build
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    steps:

      - name: Setup Cosign Public Key
        run: echo "$KEY" > cosign.pub
        shell: bash
        env:
          KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}
      
      - name: Install Cosign
        uses: sigstore/cosign-installer@v2.3.0
        with:
          cosign-release: "v1.8.0"

      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: SBOM-ATTESTATION

      - name: Scan SBOM attestation file
        run: |
          grype sbom_attestation.json --key cosign.pub --only-fixed -o table -f medium --file grype_report.txt
        #continue-on-error: true

      - name: Print Grype report
        run: cat grype_report.txt

      - name: Archive grype results
        uses: actions/upload-artifact@v3
        with:
          name: GRYPE_REPORT
          path: grype_report.txt
